/*
 * Openize.HEIC
 * Copyright (c) 2024-2025 Openize Pty Ltd.
 *
 * This file is part of Openize.HEIC.
 *
 * Openize.HEIC is available under Openize license, which is
 * available along with Openize.HEIC sources.
 */

package openize.heic.tests;

import openize.heic.decoder.HeicImage;
import openize.heic.decoder.HeicImageFrame;
import openize.heic.decoder.PixelFormat;
import openize.io.IOFileStream;
import openize.io.IOMode;
import org.testng.annotations.DataProvider;
import org.testng.annotations.Test;

import java.nio.file.Paths;
import java.util.Map;


@Test
public class HEICTest extends TestsCore
{
    @DataProvider
    public static Object[][] testIphoneImagesData()
    {
        return new Object[][]{
                {"iphone_photo.heic"},
                {"iphone_portrait_photo.heic"},
        };
    }

    @DataProvider
    public static Object[][] testDerivedImagesData()
    {
        return new Object[][]{
                {"nokia/grid_960x640.heic"},
                {"nokia/overlay_1000x680.heic"},
        };
    }

    @DataProvider
    public static Object[][] testCollectionData()
    {
        return new Object[][]{
                {"nokia/random_collection_1440x960.heic"}
        };
    }

    @DataProvider
    public static Object[][] testAlphaLayerData()
    {
        return new Object[][]{
                {"gimp_rgb_420_with_alpha.heic"}
        };
    }

    @DataProvider
    public static Object[][] TestBiggerHandlerBoxData()
    {
        return new Object[][]{
                { "samsung_a71.heic" }
        };
    }

    @DataProvider
    public static Object[][] TestScalingListData()
    {
        return new Object[][]{
                { "iphone_telephoto_with_scaling_list.heic" }
        };
    }

    /**
     * <p>
     * Test decoding of the images generated by iphone.
     * </p>
     */
    @Test(dataProvider = "testIphoneImagesData")
    public final void testIphoneImages(String filename)
    {
        try (final IOFileStream fs = new IOFileStream(Paths.get(getSamplesPath(), filename), IOMode.READ))
        {
            HeicImage image = HeicImage.load(fs);
            byte[] pixels = image.getByteArray(PixelFormat.Argb32);
            compareWithReference(filename, pixels);
        }
    }

    /**
     * <p>
     * Test decoding of the derived image.
     * Image source: Nokia.
     * </p>
     */
    @Test(dataProvider = "testDerivedImagesData")
    public final void testDerivedImages(String filename)
    {
        try (final IOFileStream fs = new IOFileStream(Paths.get(getSamplesPath(), filename), IOMode.READ))
        {
            HeicImage image = HeicImage.load(fs);
            byte[] pixels = image.getByteArray(PixelFormat.Argb32);
            compareWithReference(filename, pixels);
        }
    }

    /**
     * <p>
     * Test decoding of image collection.
     * Image source: Nokia.
     * </p>
     */
    @Test(dataProvider = "testCollectionData")
    public final void testCollection(String filename)
    {
        try (final IOFileStream fs = new IOFileStream(Paths.get(getSamplesPath(), filename), IOMode.READ))
        {
            HeicImage image = HeicImage.load(fs);

            for (Map.Entry<Long, HeicImageFrame> frame : image.getFrames().entrySet())
            {
                byte[] pixels = frame.getValue().getByteArray(PixelFormat.Argb32);
                compareWithReference(filename + "_" + frame.getKey(), pixels);
            }
        }
    }

    /**
     * <p>
     * Test decoding of image with alpha data.
     * Image is generated in Gimp.
     * </p>
     */
    @Test(dataProvider = "testAlphaLayerData")
    public final void testAlphaLayer(String filename)
    {
        try (final IOFileStream fs = new IOFileStream(Paths.get(getSamplesPath(), filename), IOMode.READ))
        {
            HeicImage image = HeicImage.load(fs);
            byte[] pixels = image.getByteArray(PixelFormat.Argb32);
            compareWithReference(filename, pixels);
        }
    }

    /**
     * <p>
     * Test decoding of image with bigger HandlerBox.
     * Image is captured with Samsung A71.
     * </p>
     */
    @Test (dataProvider = "TestBiggerHandlerBoxData")
    public final void testBiggerHandlerBox(String filename)
    {
        try (final IOFileStream fs = new IOFileStream(Paths.get(getSamplesPath(), filename), IOMode.READ))
        {
            HeicImage image = HeicImage.load(fs);
            byte[] pixels = image.getByteArray(PixelFormat.Argb32);
            compareWithReference(filename, pixels);
        }
    }

    /**
     * <p>
     * Test decoding of image with scaling list.
     * Image is captured with iPhone 12 Pro.
     * </p>
     */
    @Test (dataProvider = "TestScalingListData")
    public final void testScalingList(String filename)
    {
        try (final IOFileStream fs = new IOFileStream(Paths.get(getSamplesPath(), filename), IOMode.READ))
        {
            HeicImage image = HeicImage.load(fs);
            byte[] pixels = image.getByteArray(PixelFormat.Argb32);
            compareWithReference(filename, pixels);
        }
    }
}
